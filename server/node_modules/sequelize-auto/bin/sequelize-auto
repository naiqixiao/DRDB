#!/usr/bin/env node
const sequelizeAuto = require('../');
const path = require('path');

const argv = require('yargs')
  .usage(
    'Usage: sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName]'
  )
  .demand(['h', 'd'])
  .alias('h', 'host').string('h')
  .alias('d', 'database').string('d')
  .alias('u', 'user').string('u')
  .alias('x', 'pass').string('x')
  .alias('p', 'port').number('p')
  .alias('c', 'config').config('c')
  .alias('o', 'output').string('o')
  .alias('e', 'dialect').string('e')
  .alias('a', 'additional').config('a')
  .alias('t', 'tables').string('t')
  .alias('T', 'skip-tables').string('T')
  .alias('cm', 'caseModel')
  .alias('cf', 'caseFile')
  .alias('cp', 'caseProp')
  .alias('n', 'no-write').boolean('n')
  .alias('s', 'schema').string('s')
  .alias('l', 'lang').string('l')
  .describe('h', 'IP/Hostname for the database.')
  .describe('d', 'Database name.')
  .describe('u', 'Username for database.')
  .describe('x', 'Password for database.')
  .describe('p', 'Port number for database (not for sqlite). Ex: MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433')
  .describe(
    'c',
    'Path to JSON file for Sequelize\'s constructor "options" flag object as defined here: https://sequelize.org/v5/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor'
  )
  .describe('o', 'What directory to place the models.')
  .describe('e', "The dialect/engine that you're using: postgres, mysql, sqlite, mssql")
  .describe(
    'a',
    "Path to JSON file containing model definitions (for all tables) which are to be defined within a model's configuration parameter. For more info: https://sequelize.org/v5/manual/models-definition.html#configuration"
  )
  .describe('t', 'Comma-separated names of tables to import')
  .describe('T', 'Comma-separated names of tables to skip')
  .describe('cm', 'Set case of model names: c|l|o|p|u \n c = camelCase \n l = lower_case \n o = original (default) \n p = PascalCase \n u = UPPER_CASE')
  .describe('cf', 'Set case of file names: c|l|o|p|u')
  .describe('cp', 'Set case of property names: c|l|o|p|u')
  .describe('n', 'Prevent writing the models to disk.')
  .describe('s', 'Database schema from which to retrieve tables')
  .describe('l', 'Language for Model output: es5|es6|esm|ts \n es5 = ES5 CJS modules (default) \n es6 = ES6 CJS modules \n esm = ES6 ESM modules \n ts = TypeScript ')
  .argv;

const dir = !argv.n && (argv.o || path.resolve(process.cwd() + '/models'));

let configFile = {
  spaces: true,
  indentation: 2
};

if (argv.c) {
  configFile = require(path.resolve(argv.c));
}

configFile.directory = configFile.directory || dir;

let additional = {};
if (argv.a) {
  additional = require(path.resolve(argv.a));
}

if (configFile.additional) {
  additional = configFile.additional;
}

let lang = argv.l || configFile.lang || 'es5';

configFile.additional = additional;
configFile.dialect = argv.e || configFile.dialect || 'mysql';
configFile.port = argv.p || configFile.port || getDefaultPort(configFile.dialect);
configFile.host = argv.h || configFile.host || 'localhost';
configFile.storage = argv.d;
configFile.tables = configFile.tables || (argv.t && argv.t.split(',')) || null;
configFile.skipTables = configFile.skipTables || (argv.T && argv.T.split(',')) || null;
configFile.schema = argv.s || configFile.schema;
configFile.typescript = (lang === 'ts');
configFile.es6 = (lang === 'es6');
configFile.esm = (lang === 'esm');
configFile.caseModel = argv.cm || configFile.caseModel || 'o'
configFile.caseFile = argv.cf || configFile.caseFile || 'o'
configFile.caseProp = argv.cp || configFile.caseProp || 'o'

console.log(configFile);

function getDefaultPort(dialect) {
  switch (dialect.toLowerCase()) {
    case 'mssql':
      return 1433;
    case 'postgres':
      return 5432;
    default:
      return 3306;
  }
}

const auto = new sequelizeAuto(argv.d, argv.u, !!argv.x ? '' + argv.x : null, configFile);

auto.run(function(err) {
  if (err) {
    throw err;
  }
  console.log('Done!');
});
